// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"flag"
	config2 "github.com/RollerM0bster/hw-esheludenko/hw12_13_14_15_calendar/internal/config"
	"log"
	"os"
	"strconv"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"github.com/RollerM0bster/hw-esheludenko/hw12_13_14_15_calendar/restapi"
	"github.com/RollerM0bster/hw-esheludenko/hw12_13_14_15_calendar/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!
var configFile string

func init() {
	flag.StringVar(&configFile, "config", "./configs/generated-api-server-config.yaml", "Path to configuration file")
}

func main() {
	flag.Parse()
	if configFile == "" {
		log.Fatal("Missing configuration file")
	}
	config := config2.NewConfig()
	err := config.Load(configFile)
	if err != nil {
		log.Fatalf("Error loading configuration file: %s", err)
		os.Exit(1) //nolint:gocritic
	}

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewCalendarAPIAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	server.Host = config.ServerConfig.Host
	server.Port, _ = strconv.Atoi(config.ServerConfig.Port)

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Calendar API"
	parser.LongDescription = "API для работы с событиями календаря"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
