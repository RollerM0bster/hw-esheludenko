// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutEventsHandlerFunc turns a function with the right signature into a put events handler
type PutEventsHandlerFunc func(PutEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutEventsHandlerFunc) Handle(params PutEventsParams) middleware.Responder {
	return fn(params)
}

// PutEventsHandler interface for that can handle valid put events params
type PutEventsHandler interface {
	Handle(PutEventsParams) middleware.Responder
}

// NewPutEvents creates a new http.Handler for the put events operation
func NewPutEvents(ctx *middleware.Context, handler PutEventsHandler) *PutEvents {
	return &PutEvents{Context: ctx, Handler: handler}
}

/*
	PutEvents swagger:route PUT /events putEvents

Обновить событие
*/
type PutEvents struct {
	Context *middleware.Context
	Handler PutEventsHandler
}

func (o *PutEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutEventsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
